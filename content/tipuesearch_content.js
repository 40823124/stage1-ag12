var tipuesearch = {"pages": [{'title': 'Home', 'text': 'ahoy \n \n', 'tags': '', 'url': 'Home.html'}, {'title': '協同方式', 'text': '使用Fork並Pull request 方式進行協同 \n 修改前須pull github倉儲以同步本地內容 \n', 'tags': '', 'url': '協同方式.html'}, {'title': '組員名單', 'text': '40823124\xa0 github \xa0 Site   40823120\xa0 github \xa0 Site \n', 'tags': '', 'url': '組員名單.html'}, {'title': '40823120', 'text': '', 'tags': '', 'url': '40823120.html'}, {'title': 'W2', 'text': '將升降梯導入coppeliaSim，開始設定 \n stage1-ag12 平面四桿機構 設計動機:有些物品因擺放過高而無法取的，而想做一個升降梯幫助 \n \n 檔案: https://drive.google.com/drive/folders/1xvnKv8nXoVt-maXw1V-cGuNGGitRA9pT?usp=sharing \n', 'tags': '', 'url': 'W2.html'}, {'title': 'W3', 'text': '因W2設置的機構有誤導致 coppeliasim模擬出錯，而修改機構為古代坦克車車 \n \n', 'tags': '', 'url': 'W3.html'}, {'title': '分工部分', 'text': '我負責的是繪製和設計機構，並且使用inventor組合使之約束和更新倉儲 \n 圖的分解及動畫 \n 機構影片 \n 圖檔介紹以及爆炸圖分解 \n', 'tags': '', 'url': '分工部分.html'}, {'title': 'W4報告', 'text': 'PDF \n reveal \n \n', 'tags': '', 'url': 'W4報告.html'}, {'title': '圖片區', 'text': '圖檔庫 \n \n', 'tags': '', 'url': '圖片區.html'}, {'title': '408213124', 'text': '負責coppeliasim組合與裝配和控制 \n', 'tags': '', 'url': '408213124.html'}, {'title': '模擬', 'text': '\n', 'tags': '', 'url': '模擬.html'}, {'title': '程式碼', 'text': "\n threadFunction=function()\n    while sim.getSimulationState()~=sim.simulation_advancing_abouttostop do\n        -- Read the keyboard messages (make sure the focus is on the main window, scene view):\n        message,auxiliaryData=sim.getSimulatorMessage()\n        while message~=-1 do\n            if (message==sim.message_keypress) then\n                if (auxiliaryData[1]==2007) then\n                    -- up key\n                    velocity=1\n                    torque=2\n                    hammer_back = 0\n\n                    \n                end\n                if (auxiliaryData[1]==2008) then\n                    -- down key\n                     hammer_back = 1\n                     torque=-2\n                     velocity = -1\n\n                end\n               \n            end\n            message,auxiliaryData=sim.getSimulatorMessage()\n        end\n \n        -- We take care of setting the desired top position:\n        sim.setJointTargetPosition(joint, velocity)\n        sim.setJointForce(joint,torque)\n        \n        -- Since this script is threaded, don't waste time here:\n        sim.switchThread() -- Resume the script at next simulation loop start\n    end\nend\n-- Put some initialization code here:\n-- Retrieving of some handles and setting of some initial values:\njoint=sim.getObjectHandle('joint1'),sim.getObjectHandle('joint3')\nhammer=sim.getObjectHandle('weel1'),sim.getObjectHandle('weel3')\nvelocity=0\nhammer_back=0\ntorque=0\norientation=sim.getJointPosition(joint, -1)\nposition=sim.getObjectPosition(hammer,-1)\n-- Here we execute the regular thread code:\nres,err=xpcall(threadFunction,function(err) return debug.traceback(err) end)\nif not res then\n    sim.addStatusbarMessage('Lua runtime error: '..err)\nend\n \n-- Put some clean-up code here:\n\n \n 砲台 \n threadFunction=function()\n    while sim.getSimulationState()~=sim.simulation_advancing_abouttostop do\n        -- Read the keyboard messages (make sure the focus is on the main window, scene view):\n        message,auxiliaryData=sim.getSimulatorMessage()\n        while message~=-1 do\n            if (message==sim.message_keypress) then\n                if (auxiliaryData[1]==97) then\n                    -- a key\n                    velocity=0.01\n                    torque=0.02\n                    hammer_back = 0\n\n                    \n                end\n                if (auxiliaryData[1]==100) then\n                    -- d key\n                     hammer_back = 1\n                     torque=-0.02\n                     velocity = -0.01\n\n                end\n               \n            end\n            message,auxiliaryData=sim.getSimulatorMessage()\n        end\n \n        -- We take care of setting the desired top position:\n        sim.setJointTargetPosition(joint, velocity)\n        sim.setJointForce(joint,torque)\n        \n        -- Since this script is threaded, don't waste time here:\n        sim.switchThread() -- Resume the script at next simulation loop start\n    end\nend\n-- Put some initialization code here:\n-- Retrieving of some handles and setting of some initial values:\njoint=sim.getObjectHandle('joint0')\nhammer=sim.getObjectHandle('top')\nvelocity=0\nhammer_back=0\ntorque=0\norientation=sim.getJointPosition(joint, -1)\nposition=sim.getObjectPosition(hammer,-1)\n-- Here we execute the regular thread code:\nres,err=xpcall(threadFunction,function(err) return debug.traceback(err) end)\nif not res then\n    sim.addStatusbarMessage('Lua runtime error: '..err)\nend\n \n-- Put some clean-up code here:\n\nthreadFunction=function()\n    while sim.getSimulationState()~=sim.simulation_advancing_abouttostop do\n        -- Read the keyboard messages (make sure the focus is on the main window, scene view):\n        message,auxiliaryData=sim.getSimulatorMessage()\n        while message~=-1 do\n            if (message==sim.message_keypress) then\n                if (auxiliaryData[1]==97) then\n                    -- a key\n                    velocity=0.01\n                    torque=0.02\n                    hammer_back = 0\n\n                    \n                end\n                if (auxiliaryData[1]==100) then\n                    -- d key\n                     hammer_back = 1\n                     torque=-0.02\n                     velocity = -0.01\n\n                end\n               \n            end\n            message,auxiliaryData=sim.getSimulatorMessage()\n        end\n \n        -- We take care of setting the desired top position:\n        sim.setJointTargetPosition(joint, velocity)\n        sim.setJointForce(joint,torque)\n        \n        -- Since this script is threaded, don't waste time here:\n        sim.switchThread() -- Resume the script at next simulation loop start\n    end\nend\n-- Put some initialization code here:\n-- Retrieving of some handles and setting of some initial values:\njoint=sim.getObjectHandle('joint0')\nhammer=sim.getObjectHandle('top')\nvelocity=0\nhammer_back=0\ntorque=0\norientation=sim.getJointPosition(joint, -1)\nposition=sim.getObjectPosition(hammer,-1)\n-- Here we execute the regular thread code:\nres,err=xpcall(threadFunction,function(err) return debug.traceback(err) end)\nif not res then\n    sim.addStatusbarMessage('Lua runtime error: '..err)\nend\n \n-- Put some clean-up code here:\n\n", 'tags': '', 'url': '程式碼.html'}]};