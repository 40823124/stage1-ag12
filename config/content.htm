<h1>Home</h1>
<p>ahoy</p>
<p><img alt="" height="360" src="/images/14774872866.png" width="640"/></p>
<h2>協同方式</h2>
<p>使用Fork並Pull request 方式進行協同</p>
<p>修改前須pull github倉儲以同步本地內容</p>
<h2>組員名單</h2>
<p><br/>40823124 <a href="https://github.com/40823124/CD2021">github</a> <a href="https://40823124.github.io/CD2021/">Site</a> <br/>40823120 <a href="https://github.com/40823120/CD2021">github</a> <a href="https://40823120.github.io/CD2021/">Site</a></p>
<h1>40823120</h1>
<h2>W2</h2>
<p>將升降梯導入coppeliaSim，開始設定</p>
<p><span>stage1-ag12 平面四桿機構</span><br/><span>設計動機:有些物品因擺放過高而無法取的，而想做一個升降梯幫助</span></p>
<p><span></span></p>
<p><span>檔案:<a href="https://drive.google.com/drive/folders/1xvnKv8nXoVt-maXw1V-cGuNGGitRA9pT?usp=sharing">https://drive.google.com/drive/folders/1xvnKv8nXoVt-maXw1V-cGuNGGitRA9pT?usp=sharing</a></span></p>
<h2>W3</h2>
<p>因W2設置的機構有誤導致<span>coppeliasim模擬出錯，而修改機構為古代坦克車車</span></p>
<p><span><img alt="" height="217" src="/images/1111.jpg" width="401"/></span></p>
<h2>分工部分</h2>
<p>我負責的是繪製和設計機構，並且使用inventor組合使之約束和更新倉儲</p>
<p>圖的分解及動畫</p>
<p><a href="https://youtu.be/8YG34_5zsrA">機構影片</a></p>
<p><a href="https://youtu.be/JfUe0BDtDhw">圖檔介紹以及爆炸圖分解</a></p>
<h2>W4報告</h2>
<p><a href="https://drive.google.com/file/d/1v777dkaWtipr3uhJR_MoStCK7upgDVXb/view?usp=sharing">PDF</a></p>
<p><a href="https://40823124.github.io/stage1-ag12/reveal/index.html#/">reveal</a></p>
<p></p>
<h2>圖片區</h2>
<p><a href="https://40823120.github.io/CD2021/content/%E5%9C%96%E7%89%87%E5%8D%80.html">圖檔庫</a></p>
<p><span></span></p>
<h1>408213124</h1>
<p>負責coppeliasim組合與裝配和控制</p>
<h2>模擬</h2>
<p><img alt="" height="500" src="/images/w3.gif" width="900"/></p>
<h2>程式碼</h2>
<p><img alt="" height="457" src="/images/w3_2.gif" width="900"/></p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">threadFunction=function()
    while sim.getSimulationState()~=sim.simulation_advancing_abouttostop do
        -- Read the keyboard messages (make sure the focus is on the main window, scene view):
        message,auxiliaryData=sim.getSimulatorMessage()
        while message~=-1 do
            if (message==sim.message_keypress) then
                if (auxiliaryData[1]==2007) then
                    -- up key
                    velocity=1
                    torque=2
                    hammer_back = 0

                    
                end
                if (auxiliaryData[1]==2008) then
                    -- down key
                     hammer_back = 1
                     torque=-2
                     velocity = -1

                end
               
            end
            message,auxiliaryData=sim.getSimulatorMessage()
        end
 
        -- We take care of setting the desired top position:
        sim.setJointTargetPosition(joint, velocity)
        sim.setJointForce(joint,torque)
        
        -- Since this script is threaded, don't waste time here:
        sim.switchThread() -- Resume the script at next simulation loop start
    end
end
-- Put some initialization code here:
-- Retrieving of some handles and setting of some initial values:
joint=sim.getObjectHandle('joint1'),sim.getObjectHandle('joint3')
hammer=sim.getObjectHandle('weel1'),sim.getObjectHandle('weel3')
velocity=0
hammer_back=0
torque=0
orientation=sim.getJointPosition(joint, -1)
position=sim.getObjectPosition(hammer,-1)
-- Here we execute the regular thread code:
res,err=xpcall(threadFunction,function(err) return debug.traceback(err) end)
if not res then
    sim.addStatusbarMessage('Lua runtime error: '..err)
end
 
-- Put some clean-up code here:

</pre>
<p>砲台</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">threadFunction=function()
    while sim.getSimulationState()~=sim.simulation_advancing_abouttostop do
        -- Read the keyboard messages (make sure the focus is on the main window, scene view):
        message,auxiliaryData=sim.getSimulatorMessage()
        while message~=-1 do
            if (message==sim.message_keypress) then
                if (auxiliaryData[1]==97) then
                    -- a key
                    velocity=0.01
                    torque=0.02
                    hammer_back = 0

                    
                end
                if (auxiliaryData[1]==100) then
                    -- d key
                     hammer_back = 1
                     torque=-0.02
                     velocity = -0.01

                end
               
            end
            message,auxiliaryData=sim.getSimulatorMessage()
        end
 
        -- We take care of setting the desired top position:
        sim.setJointTargetPosition(joint, velocity)
        sim.setJointForce(joint,torque)
        
        -- Since this script is threaded, don't waste time here:
        sim.switchThread() -- Resume the script at next simulation loop start
    end
end
-- Put some initialization code here:
-- Retrieving of some handles and setting of some initial values:
joint=sim.getObjectHandle('joint0')
hammer=sim.getObjectHandle('top')
velocity=0
hammer_back=0
torque=0
orientation=sim.getJointPosition(joint, -1)
position=sim.getObjectPosition(hammer,-1)
-- Here we execute the regular thread code:
res,err=xpcall(threadFunction,function(err) return debug.traceback(err) end)
if not res then
    sim.addStatusbarMessage('Lua runtime error: '..err)
end
 
-- Put some clean-up code here:

threadFunction=function()
    while sim.getSimulationState()~=sim.simulation_advancing_abouttostop do
        -- Read the keyboard messages (make sure the focus is on the main window, scene view):
        message,auxiliaryData=sim.getSimulatorMessage()
        while message~=-1 do
            if (message==sim.message_keypress) then
                if (auxiliaryData[1]==97) then
                    -- a key
                    velocity=0.01
                    torque=0.02
                    hammer_back = 0

                    
                end
                if (auxiliaryData[1]==100) then
                    -- d key
                     hammer_back = 1
                     torque=-0.02
                     velocity = -0.01

                end
               
            end
            message,auxiliaryData=sim.getSimulatorMessage()
        end
 
        -- We take care of setting the desired top position:
        sim.setJointTargetPosition(joint, velocity)
        sim.setJointForce(joint,torque)
        
        -- Since this script is threaded, don't waste time here:
        sim.switchThread() -- Resume the script at next simulation loop start
    end
end
-- Put some initialization code here:
-- Retrieving of some handles and setting of some initial values:
joint=sim.getObjectHandle('joint0')
hammer=sim.getObjectHandle('top')
velocity=0
hammer_back=0
torque=0
orientation=sim.getJointPosition(joint, -1)
position=sim.getObjectPosition(hammer,-1)
-- Here we execute the regular thread code:
res,err=xpcall(threadFunction,function(err) return debug.traceback(err) end)
if not res then
    sim.addStatusbarMessage('Lua runtime error: '..err)
end
 
-- Put some clean-up code here:

</pre>